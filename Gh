import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Config
LLM_FILE = "llm_responses.xlsx"
HUMAN_FILE = "human_responses.xlsx"
LLM_COLUMN = "response"
HUMAN_COLUMN = "response"
MATCH_THRESHOLD = 0.4  # Set your threshold here
OUTPUT_FILE = "llm_to_human_mapping_threshold.xlsx"

def clean_text(text):
    if pd.isna(text):
        return ""
    return " ".join(str(text).split())

llm_df = pd.read_excel(LLM_FILE)
human_df = pd.read_excel(HUMAN_FILE)

llm_df[LLM_COLUMN] = llm_df[LLM_COLUMN].apply(clean_text)
human_df[HUMAN_COLUMN] = human_df[HUMAN_COLUMN].apply(clean_text)

llm_df = llm_df[llm_df[LLM_COLUMN] != ""].reset_index(drop=True)
human_df = human_df[human_df[HUMAN_COLUMN] != ""].reset_index(drop=True)

vectorizer = TfidfVectorizer()
vectorizer.fit(pd.concat([llm_df[LLM_COLUMN], human_df[HUMAN_COLUMN]]))
llm_tfidf = vectorizer.transform(llm_df[LLM_COLUMN])
human_tfidf = vectorizer.transform(human_df[HUMAN_COLUMN])

results = []
for i in range(len(llm_df)):
    similarities = cosine_similarity(llm_tfidf[i], human_tfidf)[0]
    best_human_idx = similarities.argmax()
    best_score = similarities[best_human_idx]
    matched_human_response = human_df.loc[best_human_idx, HUMAN_COLUMN] if best_score >= MATCH_THRESHOLD else ""
    results.append({
        "LLM_Index": i,
        "LLM_Response":
