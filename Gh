from nltk.translate.bleu_score import sentence_bleu
from rouge_score import rouge_scorer

# Input and outputs
input_text = "Benefits of Exercise: Regular physical activity improves health and reduces risk of diseases."
generated_output = {
    "Condition": "Regular exercise is vital for health.",
    "Consequence": "It reduces the risk of chronic diseases.",
    "Context": "Physical inactivity is common in modern lifestyles.",
    "Criteria": "Exercise must be regular and varied.",
    "Cause": "Lack of exercise leads to poor health."
}

# BLEU Score
def calculate_bleu(reference, candidate):
    ref_tokens = reference.split()
    cand_tokens = candidate.split()
    return sentence_bleu([ref_tokens], cand_tokens)

# ROUGE Score
scorer = rouge_scorer.RougeScorer(['rouge1', 'rouge2', 'rougeL'], use_stemmer=True)

def calculate_rouge(reference, candidate):
    scores = scorer.score(reference, candidate)
    return {k: v.fmeasure for k, v in scores.items()}

# Evaluate each 5C component
bleu_scores = {}
rouge_scores = {}

for key, value in generated_output.items():
    bleu_scores[key] = calculate_bleu(input_text, value)
    rouge_scores[key] = calculate_rouge(input_text, value)

# Aggregate scores
average_bleu = sum(bleu_scores.values()) / len(bleu_scores)
average_rouge = {k: sum([v[k] for v in rouge_scores.values()]) / len(rouge_scores) for k in ['rouge1', 'rouge2', 'rougeL']}

print("BLEU Scores:", bleu_scores)
print("Average BLEU Score:", average_bleu)
print("ROUGE Scores:", rouge_scores)
print("Average ROUGE Scores:", average_rouge)
