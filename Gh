Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
    On Error GoTo ErrorHandler
    Application.EnableEvents = False ' Disable events temporarily

    Dim updateTypeColumn As Integer
    updateTypeColumn = 2 ' Assuming "Update Type" column is column 2

    ' Check if the change is on a sheet other than "Mapping" and in the specified column
    If Sh.Name <> "Mapping" And Target.Column = updateTypeColumn Then

        ' Ensure the change is only processed for single-cell updates
        If Target.Cells.Count = 1 Then
            Dim selectedOption As String
            selectedOption = Target.Value

            ' Proceed only if a valid selection is made from the drop-down
            If selectedOption <> "" Then

                ' Determine the number of operations based on entries in "Update Type" column
                Dim numOperations As Integer
                numOperations = Application.WorksheetFunction.CountA(Sh.Columns(updateTypeColumn)) - 1 ' Subtract header row

                ' Insert a new row for the new block
                Dim newRow As Long
                newRow = Target.Row + 1
                Sh.Rows(newRow).Insert Shift:=xlDown

                ' Insert headers for the new block
                Dim headerRow As Long
                headerRow = newRow + 1
                Sh.Cells(headerRow, 1).Value = numOperations & ": " & selectedOption

                ' Define headers for different update types
                Dim headers As Variant
                Select Case selectedOption
                    Case "Update Paragraph"
                        headers = Array("Serial No.", "Paragraph Header Level", "Before Header", "Before Paragraph No.", "Content", "1234567", "10", "11", "12", "13")
                    Case "Update Text"
                        headers = Array("Serial No.", "Reference", "Old Text", "New Text")
                    Case "Update Front Page"
                        headers = Array("Serial No.", "Reference", "New Text")
                    Case "Placeholder Update"
                        headers = Array("Serial No.", "Placeholder Key", "Placeholder Value")
                    Case Else
                        ' Default case if none of the above options match
                        headers = Array("Serial No.", "Default Header 1", "Default Header 2", "Default Header 3", "Default Header 4")
                End Select

                ' Populate headers in the new block
                Dim i As Integer
                For i = LBound(headers) To UBound(headers)
                    Sh.Cells(headerRow + 1, i + 1).Value = headers(i)
                Next i

                ' Determine the range for the table
                Dim tableStart As Range
                Set tableStart = Sh.Cells(headerRow + 1, 1)
                Dim tableEnd As Range
                Set tableEnd = Sh.Cells(headerRow + 2, UBound(headers) + 1)

                ' Ensure there's enough space for the new table
                If Not Intersect(tableStart, Sh.UsedRange) Is Nothing Or Not Intersect(tableEnd, Sh.UsedRange) Is Nothing Then
                    Sh.Rows(newRow).Insert Shift:=xlDown
                    headerRow = newRow + 1
                    Set tableStart = Sh.Cells(headerRow + 1, 1)
                    Set tableEnd = Sh.Cells(headerRow + 2, UBound(headers) + 1)
                End If

                Dim tbl As ListObject
                Set tbl = Sh.ListObjects.Add(xlSrcRange, Sh.Range(tableStart, tableEnd), , xlYes)
                tbl.Name = "Table_" & numOperations & "_" & selectedOption
                tbl.HeaderRowRange.Font.Bold = True

                ' Add serial numbers to the first column of the table
                Dim rowCount As Integer
                rowCount = tbl.ListRows.Count
                For i = 1 To rowCount
                    tbl.DataBodyRange.Cells(i, 1).Value = i
                Next i

                ' Insert a blank row underneath the headers
                Dim newBlockRow As Long
                newBlockRow = headerRow + 3
                Sh.Rows(newBlockRow).Insert Shift:=xlDown
                
                ' Disable the selected option in the drop-down
                DisableSelectedOption Sh, Target, selectedOption

                ' Add provision to add new rows to the table
                AddRowToTable tbl
            End If
        End If
    End If

    Application.EnableEvents = True ' Re-enable events
    Exit Sub

ErrorHandler:
    Application.EnableEvents = True
    MsgBox "An error occurred: " & Err.Description & " in " & Err.Source
End Sub

Private Sub DisableSelectedOption(ByVal Sh As Worksheet, ByVal Target As Range, ByVal selectedOption As String)
    Dim dv As Validation
    Set dv = Target.Validation

    If Not dv Is Nothing Then
        Dim options As Variant
        options = Split(dv.Formula1, ",")

        Dim newOptions As String
        Dim i As Integer
        For i = LBound(options) To UBound(options)
            If Trim(options(i)) <> selectedOption Then
                If newOptions = "" Then
                    newOptions = Trim(options(i))
                Else
                    newOptions = newOptions & "," & Trim(options(i))
                End If
            End If
        Next i

        ' Apply the new list without the selected option
        Target.Validation.Delete
        Target.Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:=newOptions
    End If
End Sub

Private Sub AddRowToTable(ByVal tbl As ListObject)
    Dim lastRow As ListRow
    Set lastRow = tbl.ListRows.Add

    ' Add serial number to the new row
    lastRow.Range.Cells(1, 1).Value = tbl.ListRows.Count

    ' Clear other cells if necessary
    Dim i As Integer
    For i = 2 To tbl.ListColumns.Count
        lastRow.Range.Cells(1, i).ClearContents
    Next i
End Sub
