from docx import Document
from lxml import etree

class WordDocProcessor:
    def __init__(self, file_path):
        self.docx = Document(file_path)

    def remove_images_by_condition(self, condition_fn):
        # Remove inline shapes (inline images)
        for shape in self.docx.inline_shapes:
            if condition_fn(shape):
                shape._inline.getparent().remove(shape._inline)
        
        # Remove floating shapes (text-wrapped images) by accessing the XML tree directly
        for para in self.docx.paragraphs:
            # Find all drawing elements in the paragraph (which contain floating images)
            for drawing in para._element.xpath('.//w:drawing'):
                if condition_fn(drawing):
                    drawing.getparent().remove(drawing)

    def save(self, save_path):
        self.docx.save(save_path)

# Condition function to remove images (you can base it on alt_text or other conditions)
def image_removal_condition(element):
    # Check if element is an inline shape
    if hasattr(element, 'docPr'):
        alt_text = element.docPr.get('descr')
        return alt_text and "remove_me" in alt_text

    # Check if element is a drawing (floating image)
    elif isinstance(element, etree._Element):
        descr_elements = element.xpath('.//a:blip/a:extLst/a:ext')
        if descr_elements and 'descr' in descr_elements[0].attrib:
            alt_text = descr_elements[0].attrib['descr']
            return alt_text and "remove_me" in alt_text
    return False

# Usage example
processor = WordDocProcessor('example.docx')
processor.remove_images_by_condition(image_removal_condition)
processor.save('updated_document.docx')
