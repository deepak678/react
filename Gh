Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
    On Error GoTo ErrorHandler
    Application.EnableEvents = False ' Disable events temporarily

    Dim updateTypeColumn As Integer
    updateTypeColumn = 2 ' Assuming "Update Type" column is column 2

    ' Debugging output
    Debug.Print "Sheet changed: " & Sh.Name
    Debug.Print "Target column: " & Target.Column

    ' Check if the change is on a sheet other than "Mapping" and in the specified column
    If Sh.Name <> "Mapping" And Target.Column = updateTypeColumn Then
        Debug.Print "Condition met for sheet: " & Sh.Name & " and column: " & updateTypeColumn

        ' Determine the number of operations based on entries in "Update Type" column
        Dim numOperations As Integer
        numOperations = Application.WorksheetFunction.CountA(Sh.Columns(updateTypeColumn)) - 1 ' Subtract header row
        Debug.Print "Number of operations: " & numOperations

        ' Insert a new block based on the selected option in the "Update Type" dropdown
        If Target.Cells.Count = 1 Then
            Dim selectedOption As String
            selectedOption = Target.Value
            Debug.Print "Selected option: " & selectedOption

            ' Insert a new row for the new block
            Dim newRow As Long
            newRow = Target.Row + 1
            Sh.Rows(newRow).Insert Shift:=xlDown

            ' Insert headers for the new block
            Dim headerRow As Long
            headerRow = newRow + 1
            Sh.Cells(headerRow, 1).Value = "No. of Operations " & numOperations & " - Update Type " & selectedOption

            ' Define headers for different update types
            Dim headers As Variant
            Select Case selectedOption
                Case "Option 1"
                    headers = Array("Serial No.", "Header A1", "Header A2", "Header A3", "Header A4")
                Case "Option 2"
                    headers = Array("Serial No.", "Header B1", "Header B2", "Header B3", "Header B4")
                Case "Option 3"
                    headers = Array("Serial No.", "Header C1", "Header C2", "Header C3", "Header C4")
                ' Add more cases as needed
                Case Else
                    ' Default case if none of the above options match
                    headers = Array("Serial No.", "Default Header 1", "Default Header 2", "Default Header 3", "Default Header 4")
            End Select

            ' Populate headers in the new block
            Dim i As Integer
            For i = LBound(headers) To UBound(headers)
                Sh.Cells(headerRow, i + 1).Value = headers(i)
            Next i

            ' Create a table with the headers
            Dim tableStart As Range
            Set tableStart = Sh.Cells(headerRow, 1)
            Dim tableEnd As Range
            Set tableEnd = Sh.Cells(headerRow + 1, UBound(headers) + 1)
            Dim tbl As ListObject
            Set tbl = Sh.ListObjects.Add(xlSrcRange, Sh.Range(tableStart, tableEnd), , xlYes)
            tbl.Name = "Table_" & numOperations & "_" & selectedOption
            tbl.HeaderRowRange.Font.Bold = True

            ' Add serial numbers to the first column of the table
            Dim rowCount As Integer
            rowCount = tbl.ListRows.Count
            For i = 1 To rowCount
                tbl.DataBodyRange.Cells(i, 1).Value = i
            Next i

            ' Insert a blank row underneath the headers
            Dim newBlockRow As Long
            newBlockRow = headerRow + 2
            Sh.Rows(newBlockRow).Insert Shift:=xlDown
            
            ' Disable the selected option in the drop-down
            DisableSelectedOption Sh, Target, selectedOption
        End If
    End If

    Application.EnableEvents = True ' Re-enable events
    Exit Sub

ErrorHandler:
    Application.EnableEvents = True
    MsgBox "An error occurred: " & Err.Description
End Sub

Private Sub DisableSelectedOption(ByVal Sh As Worksheet, ByVal Target As Range, ByVal selectedOption As String)
    Dim dv As Validation
    Set dv = Target.Validation

    If Not dv Is Nothing Then
        Dim options As Variant
        options = Split(dv.Formula1, ",")

        Dim newOptions As String
        Dim i As Integer
        For i = LBound(options) To UBound(options)
            If Trim(options(i)) <> selectedOption Then
                If newOptions = "" Then
                    newOptions = Trim(options(i))
                Else
                    newOptions = newOptions & "," & Trim(options(i))
                End If
            End If
        Next i

        ' Apply the new list without the selected option
        Target.Validation.Delete
        Target.Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:=newOptions
    End If
End Sub
