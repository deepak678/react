import pandas as pd
from rapidfuzz.distance import Levenshtein

# Sample DataFrame structure:
# | LLM_output               | final_output                      |
# |--------------------------|-----------------------------------|
# | "Hello, I'm a bot."      | "Hi, I'm a bot."                  |
# | "The result is correct." | "The answer is mostly correct."  |

# Example data
data = {
    "LLM_output": [
        "The Eiffel Tower is located in Paris.",
        "Python is a programming language.",
        "Climate change is caused by greenhouse gases."
    ],
    "final_output": [
        "The Eiffel Tower is in Paris.",
        "Python is a versatile programming language.",
        "Greenhouse gases contribute to climate change."
    ]
}

df = pd.DataFrame(data)

# Function to compute normalized similarity score
def compute_similarity(llm_text, final_text):
    if not llm_text or not final_text:
        return 0.0
    # Levenshtein ratio: 1 - (edit_distance / max_len)
    distance = Levenshtein.distance(llm_text, final_text)
    max_len = max(len(llm_text), len(final_text))
    similarity = 1 - (distance / max_len)
    return round(similarity, 4)

# Apply to each row
df["similarity_score"] = df.apply(
    lambda row: compute_similarity(row["LLM_output"], row["final_output"]),
    axis=1
)

# Compute average score as "model reliance"
model_reliance = df["similarity_score"].mean()

# Output results
print("üîç Scored DataFrame:")
print(df[["LLM_output", "final_output", "similarity_score"]])
print(f"\nüìä Average Model Reliance: {model_reliance:.4f}")
